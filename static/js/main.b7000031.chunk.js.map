{"version":3,"sources":["App.js","index.js"],"names":["App","useState","isPendingTransaction","setIsPendingTransaction","currentAccount","setCurrentAccount","allTrees","setAllTrees","message","setMessage","contractAddress","contractABI","abi","checkNetwork","useCallback","ethereum","a","provider","ethers","providers","Web3Provider","getNetwork","name","Error","checkIfWalletIsConnected","window","console","log","request","method","accounts","length","account","connectWallet","alert","getAllTrees","plant","signer","getSigner","treePortalContract","Contract","getTotalTrees","count","toNumber","gasLimit","plantTxn","hash","wait","JSON","stringify","trees","treesCleaned","forEach","tree","push","address","planter","timestamp","Date","useEffect","onNewTree","from","prevState","on","off","className","href","type","placeholder","defaultValue","onChange","event","target","value","disabled","onClick","map","index","key","open","role","aria-label","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7000031.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from \"./utils/TreePortal.json\";\n\nconst ETHEREUM_NETWORK = \"rinkeby\";\n\nconst App = () => {\n  const [isPendingTransaction, setIsPendingTransaction] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allTrees, setAllTrees] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const contractAddress = \"0x9a7A04F79c402e29cf946E828c6d0098Ca5247d7\";\n  const contractABI = abi.abi;\n\n  // enfore rinkeby network\n  const checkNetwork = useCallback(async (ethereum) => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const network = await provider.getNetwork();\n\n    if (network.name !== ETHEREUM_NETWORK)\n      throw Error(\"Must connect using the Rinkeby network\");\n  }, []);\n\n\n  const checkIfWalletIsConnected = useCallback(async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      await checkNetwork(ethereum);\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized MetaMask account found\");\n      }\n    } catch(err) {\n      console.log(err);\n    }\n  }, [checkNetwork]);\n\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\"});\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      getAllTrees();\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n\n  const plant = async (message) => {\n    setIsPendingTransaction(true);\n    try {\n      const { ethereum } = window;\n\n      await checkNetwork(ethereum);\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const treePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await treePortalContract.getTotalTrees();\n        console.log(\"Retrieved total tree count...\", count.toNumber());\n        const plantTxn = await treePortalContract.plant(message, { gasLimit: 300000 });\n        console.log(\"Mining...\", plantTxn.hash);\n\n        await plantTxn.wait();\n        console.log(\"Mined -- \", plantTxn.hash);\n\n        setMessage(\"\");\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch(err) {\n      console.log(err);\n      alert(JSON.stringify(err))\n    }\n    setIsPendingTransaction(false)\n  }\n\n\n  const getAllTrees = useCallback(async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const treePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const trees = await treePortalContract.getAllTrees();\n\n        let treesCleaned = [];\n        trees.forEach(tree => {\n          treesCleaned.push({\n            address: tree.planter,\n            timestamp: new Date(tree.timestamp * 1000),\n            message: tree.message\n          });\n        });\n\n        setAllTrees(treesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch(err) {\n      console.log(err);\n    }\n  }, [contractABI]);\n\n\n  useEffect(() => {\n    let treePortalContract;\n\n    const onNewTree = (from, timestamp, message) => {\n      console.log('NewTree', from, timestamp, message);\n      setAllTrees(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        }\n      ])\n    }\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      treePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      treePortalContract.on('NewTree', onNewTree);\n    }\n\n    return () => {\n      if (treePortalContract) {\n        treePortalContract.off('NewTree', onNewTree);\n      }\n    }\n  }, [contractABI]);\n\n  const viewAddress = (address) => {\n    window.open(\"https://rinkeby.etherscan.io/address/\"+address);\n  }\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n\n    if (currentAccount)\n      getAllTrees();\n  }, [getAllTrees, currentAccount, checkIfWalletIsConnected]);\n\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        Rinkeby Forest\n        </div>\n\n        <div className=\"bio\">\n          Help me build a virtual forest. Connect your wallet on the Rinkeby testnet and send a message when planting your tree. You may even win some testnet eth!\n          <br/><br/>\n          Built by <a href=\"https://dantemonaldo.com\">Dante</a> using <a href=\"https://buildspace.so\">buildspace</a>.\n        </div>\n\n        {currentAccount && (\n          <div className=\"messageInput\">\n            <input type=\"text\" placeholder=\"say something\" defaultValue={message} onChange={event => setMessage(event.target.value)} disabled={isPendingTransaction} />\n            <button onClick={() => plant(message)} disabled={isPendingTransaction}>\n              Plant a Tree\n            </button>\n            <div className=\"spinnerContainer\">\n              {isPendingTransaction && (\n                <div className=\"spinner\"></div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {!currentAccount && (\n          <div className=\"messageInput\">\n            <button onClick={connectWallet}>\n              Connect Wallet\n            </button>\n          </div>\n        )}\n\n        <div>\n          {allTrees.map((tree, index) => {\n            return (\n              <div className=\"planted tooltip\" key={index}>\n                <button className=\"emoji\" onClick={() => {viewAddress(tree.address)}}>\n                  <span role=\"img\" aria-label=\"tree\">🌲</span>\n                </button>\n                <div className=\"tooltiptext\">\n                  {tree.address}<br/><br/>\n                  {tree.message}<br/><br/>\n                  {tree.timestamp.toString()}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}